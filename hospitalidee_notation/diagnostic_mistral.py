#!/usr/bin/env python3
"""
Script de diagnostic pour l'int√©gration Mistral AI
V√©rifie la configuration, la connectivit√© et les performances
"""

import os
import sys
import time
import requests
from typing import Dict, Any

# Ajouter le r√©pertoire parent au PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# Charger le fichier .env
try:
    from dotenv import load_dotenv
    load_dotenv('.env')
except ImportError:
    pass

def check_environment():
    """V√©rifie les variables d'environnement"""
    print("üîç V√©rification de l'environnement...")
    
    # Variables critiques
    critical_vars = {
        'MISTRAL_API_KEY': os.getenv('MISTRAL_API_KEY'),
        'MISTRAL_MODEL': os.getenv('MISTRAL_MODEL', 'mistral-small-latest'),
        'MAX_RESPONSE_TIME': os.getenv('MAX_RESPONSE_TIME', '30.0')
    }
    
    all_good = True
    for var, value in critical_vars.items():
        if value:
            if var == 'MISTRAL_API_KEY':
                masked_value = f"{value[:8]}..." if len(value) > 8 else "***"
                print(f"‚úÖ {var}: {masked_value}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: NON D√âFINIE")
            all_good = False
    
    if not all_good:
        print("\n‚ö†Ô∏è  Variables manquantes d√©tect√©es!")
        print("üí° Solution:")
        print("   1. Copiez config_example.env vers .env")
        print("   2. Remplissez votre cl√© API Mistral")
        print("   3. Ex√©cutez: export $(cat .env | xargs)")
        return False
    
    return True

def test_mistral_connectivity():
    """Test de connectivit√© de base avec l'API Mistral"""
    print("\nüåê Test de connectivit√© Mistral...")
    
    api_key = os.getenv('MISTRAL_API_KEY')
    if not api_key:
        print("‚ùå Cl√© API manquante")
        return False
    
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    # Test simple avec timeout court
    simple_payload = {
        "model": "mistral-small-latest",
        "messages": [{"role": "user", "content": "Bonjour"}],
        "max_tokens": 10
    }
    
    try:
        start_time = time.time()
        response = requests.post(url, json=simple_payload, headers=headers, timeout=10)
        elapsed = time.time() - start_time
        
        if response.status_code == 200:
            print(f"‚úÖ Connectivit√© OK ({elapsed:.2f}s)")
            return True
        elif response.status_code == 401:
            print("‚ùå Cl√© API invalide")
            return False
        elif response.status_code == 429:
            print("‚ùå Rate limit atteint")
            return False
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå Timeout de connexion")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Erreur de connexion r√©seau")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        return False

def test_mistral_performance():
    """Test de performance avec l'API Mistral"""
    print("\n‚ö° Test de performance...")
    
    try:
        from src.mistral_client import MistralClient
        
        client = MistralClient()
        
        # Test d'analyse de sentiment
        test_text = "L'h√¥pital √©tait tr√®s bien, le personnel √©tait attentif et professionnel."
        
        start_time = time.time()
        result = client.analyze_sentiment(test_text)
        elapsed = time.time() - start_time
        
        if 'error' in result:
            print(f"‚ùå Erreur dans l'analyse: {result['error']}")
            return False
        else:
            print(f"‚úÖ Analyse de sentiment OK ({elapsed:.2f}s)")
            print(f"   R√©sultat: {result.get('sentiment', 'inconnu')} (confiance: {result.get('confidence', 0):.1%})")
            
            if elapsed > 30:
                print("‚ö†Ô∏è  Temps de r√©ponse √©lev√© (>30s)")
            elif elapsed > 10:
                print("‚ö†Ô∏è  Temps de r√©ponse mod√©r√© (>10s)")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur de performance: {e}")
        return False

def test_fallback_mode():
    """Test du mode d√©grad√©"""
    print("\nüîÑ Test du mode d√©grad√©...")
    
    try:
        from src.sentiment_analyzer import analyze_sentiment
        
        # Test avec texte simple
        test_text = "Service excellent, tr√®s satisfait!"
        result = analyze_sentiment(test_text)
        
        # V√©rifier que m√™me sans API, on a un r√©sultat
        if result and 'sentiment' in result:
            print("‚úÖ Mode d√©grad√© fonctionnel")
            print(f"   Sentiment: {result['sentiment']}")
            print(f"   Confiance: {result.get('confidence', 0):.1%}")
            return True
        else:
            print("‚ùå Mode d√©grad√© non fonctionnel")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur mode d√©grad√©: {e}")
        return False

def run_full_diagnostic():
    """Ex√©cute le diagnostic complet"""
    print("üè• Diagnostic Mistral AI - Hospitalid√©e")
    print("=" * 50)
    
    tests = [
        ("Configuration", check_environment),
        ("Connectivit√©", test_mistral_connectivity),
        ("Performance", test_mistral_performance),
        ("Mode d√©grad√©", test_fallback_mode)
    ]
    
    results = {}
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test_name}: {e}")
            results[test_name] = False
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DU DIAGNOSTIC")
    print("=" * 50)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:<15}: {status}")
    
    print(f"\nScore global: {passed}/{total}")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! L'IA devrait fonctionner correctement.")
        return True
    elif passed >= total * 0.5:
        print("‚ö†Ô∏è  Certains probl√®mes d√©tect√©s mais le syst√®me peut fonctionner en mode d√©grad√©.")
        return True
    else:
        print("‚ùå Probl√®mes critiques d√©tect√©s. V√©rifiez la configuration.")
        return False

def print_recommendations():
    """Affiche des recommandations pour r√©soudre les probl√®mes"""
    print("\nüí° RECOMMANDATIONS")
    print("=" * 50)
    print("1. **Configuration manquante :**")
    print("   - Copiez config_example.env vers .env")
    print("   - Ajoutez votre cl√© API Mistral")
    print("   - Chargez les variables: export $(cat .env | xargs)")
    print("")
    print("2. **Probl√®mes de connectivit√© :**")
    print("   - V√©rifiez votre connexion internet")
    print("   - V√©rifiez que l'API Mistral est accessible")
    print("   - Testez manuellement: curl -H 'Authorization: Bearer VOTRE_CLE' https://api.mistral.ai/v1/models")
    print("")
    print("3. **Performance lente :**")
    print("   - L'API peut √™tre surcharg√©e temporairement")
    print("   - Augmentez MAX_RESPONSE_TIME si n√©cessaire")
    print("   - Utilisez le mode d√©grad√© en attendant")
    print("")
    print("4. **Mode d√©grad√© non fonctionnel :**")
    print("   - V√©rifiez les imports Python")
    print("   - Ex√©cutez: python test_imports.py")

if __name__ == "__main__":
    success = run_full_diagnostic()
    print_recommendations()
    
    if success:
        print("\nüöÄ Pr√™t √† utiliser l'application Hospitalid√©e !")
    else:
        print("\nüîß Configuration requise avant utilisation.")
    
    sys.exit(0 if success else 1) 