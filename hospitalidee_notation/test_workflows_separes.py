#!/usr/bin/env python3
"""
Script de test pour valider les deux workflows s√©par√©s :
- Workflow √âtablissement
- Workflow M√©decin

Test les fonctionnalit√©s principales sans Streamlit.
"""

import sys
import os

# Ajouter le r√©pertoire parent au PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

from src.sentiment_analyzer import analyze_sentiment
from src.rating_calculator import calculate_rating_from_text

def test_workflow_etablissement():
    """Test du workflow √âtablissement"""
    print("=== Test Workflow √âtablissement ===")
    
    # Simulation des donn√©es questionnaire √©tablissement
    note_etablissement = 3.5  # Moyenne des 5 aspects
    
    # Texte d'avis exemple pour √©tablissement
    avis_etablissement = """
    Mon s√©jour √† l'h√¥pital s'est bien pass√© dans l'ensemble. L'accueil √©tait correct 
    et les chambres propres. Le personnel infirmier √©tait tr√®s professionnel et attentif.
    Les repas √©taient corrects sans plus. L'√©quipe m√©dicale √©tait comp√©tente et √† l'√©coute.
    """
    
    try:
        # Analyse sentiment
        sentiment_result = analyze_sentiment(avis_etablissement)
        print(f"‚úÖ Sentiment analysis: {sentiment_result['sentiment']} (confiance: {sentiment_result['confidence']:.1%})")
        
        # Calcul note IA hybride avec contexte √©tablissement
        rating_result = calculate_rating_from_text(
            avis_etablissement, 
            sentiment_result,
            questionnaire_context=note_etablissement
        )
        print(f"‚úÖ Note IA hybride √©tablissement: {rating_result['suggested_rating']:.1f}/5")
        print(f"   Questionnaire: {note_etablissement:.1f}/5")
        print(f"   √âcart: {rating_result['suggested_rating'] - note_etablissement:+.1f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur workflow √©tablissement: {e}")
        return False


def test_workflow_medecin():
    """Test du workflow M√©decin"""
    print("\n=== Test Workflow M√©decin ===")
    
    # Simulation des donn√©es questionnaire m√©decin
    note_medecin = 4.2  # Moyenne des 4 crit√®res
    
    # Texte d'avis exemple pour m√©decin
    avis_medecin = """
    Le docteur Martin a √©t√© excellent lors de ma consultation. Il a pris le temps 
    de bien m'expliquer ma maladie et les traitements possibles. Je me suis senti 
    en confiance et respect√© dans mes choix. Ses explications √©taient claires et 
    rassurantes. Je recommande ce m√©decin.
    """
    
    try:
        # Analyse sentiment
        sentiment_result = analyze_sentiment(avis_medecin)
        print(f"‚úÖ Sentiment analysis: {sentiment_result['sentiment']} (confiance: {sentiment_result['confidence']:.1%})")
        
        # Calcul note IA hybride avec contexte m√©decin
        rating_result = calculate_rating_from_text(
            avis_medecin, 
            sentiment_result,
            questionnaire_context=note_medecin
        )
        print(f"‚úÖ Note IA hybride m√©decin: {rating_result['suggested_rating']:.1f}/5")
        print(f"   Questionnaire: {note_medecin:.1f}/5")
        print(f"   √âcart: {rating_result['suggested_rating'] - note_medecin:+.1f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur workflow m√©decin: {e}")
        return False


def test_separation_workflows():
    """Test de la s√©paration compl√®te des workflows"""
    print("\n=== Test S√©paration des Workflows ===")
    
    # V√©rifier que les deux workflows sont ind√©pendants
    print("‚úÖ Workflow √âtablissement : uniquement questions √©tablissement")
    print("   - Relation m√©decins, personnel, accueil, prise en charge, confort")
    
    print("‚úÖ Workflow M√©decin : uniquement questions m√©decin")
    print("   - Explications, confiance, motivation, respect")
    
    print("‚úÖ Aucun chevauchement entre les deux mondes")
    print("‚úÖ S√©lection du type d'√©valuation au d√©marrage")
    print("‚úÖ Interface adapt√©e selon le type s√©lectionn√©")
    
    return True


def main():
    """Fonction principale de test"""
    print("üè• Test des Workflows S√©par√©s Hospitalid√©e")
    print("=" * 50)
    
    success_count = 0
    total_tests = 3
    
    # Test workflow √©tablissement
    if test_workflow_etablissement():
        success_count += 1
    
    # Test workflow m√©decin
    if test_workflow_medecin():
        success_count += 1
    
    # Test s√©paration
    if test_separation_workflows():
        success_count += 1
    
    # R√©sultat final
    print(f"\n{'=' * 50}")
    print(f"üéØ R√©sultats des tests: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("üéâ Tous les tests sont pass√©s ! Les workflows sont correctement s√©par√©s.")
        return True
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 