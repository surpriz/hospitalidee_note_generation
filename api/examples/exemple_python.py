#!/usr/bin/env python3
"""
üè• Hospitalid√©e IA API - Exemple Python
======================================

Exemple d'int√©gration de l'API Hospitalid√©e IA en Python.
Montre comment utiliser l'API pour analyser des avis patients.

Usage:
    python exemple_python.py

Pr√©requis:
    pip install requests
"""

import requests
import json
import time
from typing import Dict, Any, Optional


class HospitalideeIA:
    """Client Python pour l'API Hospitalid√©e IA"""
    
    def __init__(self, api_url: str = "http://localhost:8000"):
        """
        Initialise le client API
        
        Args:
            api_url: URL de base de l'API
                    'http://localhost:8000'          ‚Üí üíª Tests en local
                    'http://VOTRE_IP_VPS:8000'       ‚Üí üåê VPS production  
                    'https://api.votre-site.com'     ‚Üí üîí VPS avec domaine SSL
        """
        self.api_url = api_url.rstrip('/')
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'HospitalideeIA-Python-Client/1.0'
        })
    
    def evaluer_avis_complet(self, 
                           type_evaluation: str,
                           avis_text: str,
                           questionnaire_etablissement: Optional[Dict] = None,
                           questionnaire_medecin: Optional[Dict] = None,
                           generer_titre: bool = True,
                           analyse_detaillee: bool = True) -> Dict[str, Any]:
        """
        √âvalue un avis patient de mani√®re compl√®te
        
        Args:
            type_evaluation: "etablissement" ou "medecin"
            avis_text: Texte de l'avis patient
            questionnaire_etablissement: Notes √©tablissement (si type="etablissement")
            questionnaire_medecin: √âvaluations m√©decin (si type="medecin")
            generer_titre: G√©n√©rer un titre sugg√©r√©
            analyse_detaillee: Inclure l'analyse d√©taill√©e
            
        Returns:
            dict: R√©sultat complet de l'√©valuation
            
        Raises:
            Exception: En cas d'erreur API
        """
        data = {
            'type_evaluation': type_evaluation,
            'avis_text': avis_text,
            'generer_titre': generer_titre,
            'analyse_detaillee': analyse_detaillee
        }
        
        # Ajouter le questionnaire appropri√©
        if type_evaluation == 'etablissement':
            if not questionnaire_etablissement:
                raise ValueError("questionnaire_etablissement requis pour type 'etablissement'")
            data['questionnaire_etablissement'] = questionnaire_etablissement
        elif type_evaluation == 'medecin':
            if not questionnaire_medecin:
                raise ValueError("questionnaire_medecin requis pour type 'medecin'")
            data['questionnaire_medecin'] = questionnaire_medecin
        else:
            raise ValueError("type_evaluation doit √™tre 'etablissement' ou 'medecin'")
        
        return self._post('/evaluate', data)
    
    def analyser_sentiment_seul(self, text: str) -> Dict[str, Any]:
        """
        Analyse uniquement le sentiment d'un texte
        
        Args:
            text: Texte √† analyser
            
        Returns:
            dict: Analyse de sentiment
        """
        return self._post('/sentiment', text)
    
    def verifier_sante(self) -> Dict[str, Any]:
        """
        V√©rifie que l'API fonctionne
        
        Returns:
            dict: Status de l'API
        """
        return self._get('/health')
    
    def _get(self, endpoint: str) -> Dict[str, Any]:
        """Effectue une requ√™te GET"""
        url = f"{self.api_url}{endpoint}"
        
        try:
            response = self.session.get(url, timeout=30)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            raise Exception(f"Erreur API GET {endpoint}: {str(e)}")
    
    def _post(self, endpoint: str, data: Any) -> Dict[str, Any]:
        """Effectue une requ√™te POST"""
        url = f"{self.api_url}{endpoint}"
        
        try:
            response = self.session.post(url, json=data, timeout=60)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            if hasattr(e, 'response') and e.response is not None:
                try:
                    error_detail = e.response.json().get('detail', str(e))
                except:
                    error_detail = str(e)
                raise Exception(f"Erreur API POST {endpoint}: {error_detail}")
            else:
                raise Exception(f"Erreur API POST {endpoint}: {str(e)}")


def exemple_etablissement():
    """Exemple d'√©valuation d'un √©tablissement"""
    print("üè• EXEMPLE: √âvaluation √âtablissement")
    print("=" * 50)
    
    # Initialisation du client
    client = HospitalideeIA()
    
    # Donn√©es d'exemple
    avis_text = """
    S√©jour globalement satisfaisant dans cet h√¥pital. Le personnel √©tait tr√®s 
    professionnel et attentif, particuli√®rement les infirmi√®res de nuit qui ont 
    √©t√© formidables. Les m√©decins ont pris le temps d'expliquer les traitements 
    et ont r√©pondu √† toutes mes questions.
    
    Seul b√©mol: l'attente aux urgences √©tait un peu longue (3h) et les repas 
    auraient pu √™tre un peu plus vari√©s. Mais globalement, je recommande cet 
    √©tablissement pour la qualit√© des soins.
    """
    
    questionnaire = {
        'medecins': 4,
        'personnel': 5,
        'accueil': 3,
        'prise_en_charge': 4,
        'confort': 3
    }
    
    try:
        print("üì§ Envoi de l'√©valuation...")
        start_time = time.time()
        
        result = client.evaluer_avis_complet(
            type_evaluation='etablissement',
            avis_text=avis_text,
            questionnaire_etablissement=questionnaire
        )
        
        duration = time.time() - start_time
        
        print("‚úÖ √âvaluation termin√©e!")
        print(f"‚è±Ô∏è  Dur√©e: {duration:.1f}s")
        print()
        
        # Affichage des r√©sultats
        print("üìä R√âSULTATS:")
        print(f"Note finale: {result['note_finale']}/5")
        print(f"Sentiment: {result['sentiment']}")
        print(f"Confiance: {result['confiance']:.0%}")
        print(f"Intensit√© √©motionnelle: {result['intensite_emotionnelle']:.0%}")
        
        if result.get('titre_suggere'):
            print(f"Titre sugg√©r√©: \"{result['titre_suggere']}\"")
        
        if result.get('mode_degrade'):
            print("‚ö†Ô∏è  Mode d√©grad√© activ√© (IA limit√©e)")
        
        print()
        
        # Analyse d√©taill√©e si disponible
        if result.get('analyse_detaillee'):
            analyse = result['analyse_detaillee']
            print("üîç ANALYSE D√âTAILL√âE:")
            
            if 'questionnaire' in analyse:
                q = analyse['questionnaire']
                print(f"Note questionnaire: {q['note']}/5")
                print(f"D√©tails: {q['details']}")
            
            if 'sentiment' in analyse:
                s = analyse['sentiment']
                print(f"Sentiment IA: {s.get('sentiment', 'N/A')}")
                print(f"Confiance IA: {s.get('confidence', 0):.0%}")
                
                if s.get('positive_indicators'):
                    print(f"Indicateurs positifs: {s['positive_indicators'][:3]}")
                
                if s.get('negative_indicators'):
                    print(f"Indicateurs n√©gatifs: {s['negative_indicators'][:3]}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return None


def exemple_medecin():
    """Exemple d'√©valuation d'un m√©decin"""
    print("\nüë®‚Äç‚öïÔ∏è EXEMPLE: √âvaluation M√©decin")
    print("=" * 50)
    
    client = HospitalideeIA()
    
    avis_text = """
    Dr Martin est un m√©decin exceptionnel. D√®s notre premi√®re rencontre, j'ai 
    √©t√© impressionn√© par sa capacit√© d'√©coute et sa bienveillance. Il prend 
    vraiment le temps d'expliquer les traitements de fa√ßon claire et 
    compr√©hensible.
    
    Je me sens en totale confiance avec lui. Ses prescriptions sont toujours 
    tr√®s motiv√©es et il respecte compl√®tement mes choix et mes contraintes. 
    Je le recommande vivement !
    """
    
    questionnaire = {
        'explications': 'Excellentes',
        'confiance': 'Confiance totale',
        'motivation': 'Tr√®s motiv√©',
        'respect': 'Tr√®s respectueux'
    }
    
    try:
        print("üì§ Envoi de l'√©valuation...")
        
        result = client.evaluer_avis_complet(
            type_evaluation='medecin',
            avis_text=avis_text,
            questionnaire_medecin=questionnaire
        )
        
        print("‚úÖ √âvaluation termin√©e!")
        print()
        
        print("üìä R√âSULTATS:")
        print(f"Note finale: {result['note_finale']}/5")
        print(f"Sentiment: {result['sentiment']}")
        print(f"Confiance: {result['confiance']:.0%}")
        
        if result.get('titre_suggere'):
            print(f"Titre sugg√©r√©: \"{result['titre_suggere']}\"")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return None


def exemple_sentiment_seul():
    """Exemple d'analyse de sentiment uniquement"""
    print("\nüòä EXEMPLE: Analyse Sentiment Seule")
    print("=" * 50)
    
    client = HospitalideeIA()
    
    texts = [
        "Personnel tr√®s gentil et professionnel",
        "Attente beaucoup trop longue, tr√®s d√©cevant",
        "Correct dans l'ensemble, sans plus",
        "Absolument parfait, je recommande vivement !"
    ]
    
    for i, text in enumerate(texts, 1):
        try:
            print(f"üìù Texte {i}: \"{text}\"")
            
            result = client.analyser_sentiment_seul(text)
            
            if result['status'] == 'success':
                data = result['data']
                sentiment = data.get('sentiment', 'inconnu')
                confidence = data.get('confidence', 0)
                
                sentiment_emoji = {
                    'positif': 'üòä',
                    'negatif': 'üòû', 
                    'neutre': 'üòê'
                }.get(sentiment, '‚ùì')
                
                print(f"   ‚Üí {sentiment_emoji} {sentiment} (confiance: {confidence:.0%})")
            else:
                print(f"   ‚Üí ‚ùå Erreur: {result.get('message', 'Inconnue')}")
            
            print()
            
        except Exception as e:
            print(f"   ‚Üí ‚ùå Erreur: {str(e)}")
            print()


def test_connexion():
    """Teste la connexion √† l'API"""
    print("üîç TEST DE CONNEXION")
    print("=" * 50)
    
    client = HospitalideeIA()
    
    try:
        health = client.verifier_sante()
        
        if health.get('status') == 'healthy':
            print("‚úÖ API accessible et fonctionnelle")
            print(f"   Mod√®le Mistral: {health.get('config', {}).get('modele_mistral', 'N/A')}")
            print(f"   Version: {health.get('config', {}).get('version', 'N/A')}")
            
            services = health.get('services', {})
            for service, status in services.items():
                status_emoji = '‚úÖ' if status == 'ok' else '‚ùå'
                print(f"   {service}: {status_emoji} {status}")
            
            return True
        else:
            print("‚ö†Ô∏è  API accessible mais en mode d√©grad√©")
            print(f"   Status: {health.get('status', 'inconnu')}")
            return False
            
    except Exception as e:
        print(f"‚ùå API non accessible: {str(e)}")
        print()
        print("üîß V√©rifications:")
        print("   ‚Ä¢ L'API est-elle d√©marr√©e ?")
        print("   ‚Ä¢ Le port 8000 est-il ouvert ?")
        print("   ‚Ä¢ URL correcte ? (d√©faut: http://localhost:8000)")
        return False


def main():
    """Fonction principale - ex√©cute tous les exemples"""
    print("üè• Hospitalid√©e IA API - Exemples Python")
    print("=" * 60)
    print()
    print("üí° Pour VPS, changez API_URL dans la classe HospitalideeIA:")
    print("   http://localhost:8000          ‚Üí üíª Tests en local")
    print("   http://VOTRE_IP_VPS:8000       ‚Üí üåê VPS production")
    print("   https://api.votre-site.com     ‚Üí üîí VPS avec domaine SSL")
    print()
    
    # Test de connexion
    if not test_connexion():
        print("\n‚ùå Impossible de continuer sans connexion API")
        return
    
    print("\n" + "=" * 60)
    
    # Exemples d'utilisation
    try:
        # √âvaluation √©tablissement
        result_etab = exemple_etablissement()
        
        # √âvaluation m√©decin
        result_med = exemple_medecin()
        
        # Analyse sentiment seule
        exemple_sentiment_seul()
        
        print("=" * 60)
        print("üéâ Tous les exemples ont √©t√© ex√©cut√©s avec succ√®s !")
        print()
        print("üí° Int√©gration dans votre code:")
        print("   1. Installez: pip install requests")
        print("   2. Copiez la classe HospitalideeIA")
        print("   3. Utilisez client.evaluer_avis_complet()")
        print()
        print("üìñ Documentation compl√®te: http://localhost:8000/docs")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Arr√™t par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur g√©n√©rale: {str(e)}")


if __name__ == "__main__":
    main()