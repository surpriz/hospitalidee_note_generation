<?php
/**
 * üè• Hospitalid√©e IA API - Exemple PHP
 * ===================================
 * 
 * Exemple d'int√©gration de l'API Hospitalid√©e IA en PHP.
 * Montre comment utiliser l'API pour analyser des avis patients.
 * 
 * Usage:
 *     php exemple_php.php
 * 
 * Pr√©requis:
 *     - PHP 7.4+
 *     - Extension curl activ√©e
 *     - Extension json activ√©e
 */

class HospitalideeIA 
{
    private $apiUrl;
    private $timeout;
    
    /**
     * Initialise le client API
     * 
     * @param string $apiUrl URL de base de l'API
     *                      'http://localhost:8000'        ‚Üí üíª Tests en local
     *                      'http://VOTRE_IP_VPS:8000'     ‚Üí üåê VPS production
     *                      'https://api.votre-site.com'   ‚Üí üîí VPS avec domaine SSL
     * @param int $timeout Timeout en secondes
     */
    public function __construct($apiUrl = 'http://localhost:8000', $timeout = 60) 
    {
        $this->apiUrl = rtrim($apiUrl, '/');
        $this->timeout = $timeout;
    }
    
    /**
     * √âvalue un avis patient de mani√®re compl√®te
     * 
     * @param string $typeEvaluation "etablissement" ou "medecin"
     * @param string $avisText Texte de l'avis patient
     * @param array|null $questionnaireEtablissement Notes √©tablissement
     * @param array|null $questionnaireMedecin √âvaluations m√©decin
     * @param bool $genererTitre G√©n√©rer un titre sugg√©r√©
     * @param bool $analyseDetaillee Inclure l'analyse d√©taill√©e
     * @return array R√©sultat complet de l'√©valuation
     * @throws Exception En cas d'erreur API
     */
    public function evaluerAvisComplet(
        $typeEvaluation, 
        $avisText, 
        $questionnaireEtablissement = null, 
        $questionnaireMedecin = null,
        $genererTitre = true,
        $analyseDetaillee = true
    ) {
        $data = [
            'type_evaluation' => $typeEvaluation,
            'avis_text' => $avisText,
            'generer_titre' => $genererTitre,
            'analyse_detaillee' => $analyseDetaillee
        ];
        
        // Ajouter le questionnaire appropri√©
        if ($typeEvaluation === 'etablissement') {
            if (!$questionnaireEtablissement) {
                throw new Exception("questionnaire_etablissement requis pour type 'etablissement'");
            }
            $data['questionnaire_etablissement'] = $questionnaireEtablissement;
        } elseif ($typeEvaluation === 'medecin') {
            if (!$questionnaireMedecin) {
                throw new Exception("questionnaire_medecin requis pour type 'medecin'");
            }
            $data['questionnaire_medecin'] = $questionnaireMedecin;
        } else {
            throw new Exception("type_evaluation doit √™tre 'etablissement' ou 'medecin'");
        }
        
        return $this->post('/evaluate', $data);
    }
    
    /**
     * Analyse uniquement le sentiment d'un texte
     * 
     * @param string $text Texte √† analyser
     * @return array Analyse de sentiment
     */
    public function analyserSentimentSeul($text) 
    {
        return $this->post('/sentiment', $text);
    }
    
    /**
     * V√©rifie que l'API fonctionne
     * 
     * @return array Status de l'API
     */
    public function verifierSante() 
    {
        return $this->get('/health');
    }
    
    /**
     * Effectue une requ√™te GET
     * 
     * @param string $endpoint Endpoint de l'API
     * @return array R√©ponse d√©cod√©e
     * @throws Exception En cas d'erreur
     */
    private function get($endpoint) 
    {
        $url = $this->apiUrl . $endpoint;
        
        $ch = curl_init();
        curl_setopt_array($ch, [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_TIMEOUT => $this->timeout,
            CURLOPT_HTTPHEADER => [
                'User-Agent: HospitalideeIA-PHP-Client/1.0'
            ]
        ]);
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        curl_close($ch);
        
        if ($error) {
            throw new Exception("Erreur cURL GET $endpoint: $error");
        }
        
        if ($httpCode >= 400) {
            throw new Exception("Erreur HTTP GET $endpoint: $httpCode");
        }
        
        $decoded = json_decode($response, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("Erreur JSON GET $endpoint: " . json_last_error_msg());
        }
        
        return $decoded;
    }
    
    /**
     * Effectue une requ√™te POST
     * 
     * @param string $endpoint Endpoint de l'API
     * @param mixed $data Donn√©es √† envoyer
     * @return array R√©ponse d√©cod√©e
     * @throws Exception En cas d'erreur
     */
    private function post($endpoint, $data) 
    {
        $url = $this->apiUrl . $endpoint;
        $jsonData = json_encode($data);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("Erreur encodage JSON: " . json_last_error_msg());
        }
        
        $ch = curl_init();
        curl_setopt_array($ch, [
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_POST => true,
            CURLOPT_POSTFIELDS => $jsonData,
            CURLOPT_TIMEOUT => $this->timeout,
            CURLOPT_HTTPHEADER => [
                'Content-Type: application/json',
                'User-Agent: HospitalideeIA-PHP-Client/1.0'
            ]
        ]);
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        curl_close($ch);
        
        if ($error) {
            throw new Exception("Erreur cURL POST $endpoint: $error");
        }
        
        $decoded = json_decode($response, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("Erreur JSON POST $endpoint: " . json_last_error_msg());
        }
        
        if ($httpCode >= 400) {
            $errorMsg = isset($decoded['detail']) ? $decoded['detail'] : "HTTP $httpCode";
            throw new Exception("Erreur API POST $endpoint: $errorMsg");
        }
        
        return $decoded;
    }
}

/**
 * Exemple d'√©valuation d'un √©tablissement
 */
function exempleEtablissement() 
{
    echo "üè• EXEMPLE: √âvaluation √âtablissement\n";
    echo str_repeat("=", 50) . "\n";
    
    $client = new HospitalideeIA();
    
    $avisText = "
    S√©jour globalement satisfaisant dans cet h√¥pital. Le personnel √©tait tr√®s 
    professionnel et attentif, particuli√®rement les infirmi√®res de nuit qui ont 
    √©t√© formidables. Les m√©decins ont pris le temps d'expliquer les traitements 
    et ont r√©pondu √† toutes mes questions.
    
    Seul b√©mol: l'attente aux urgences √©tait un peu longue (3h) et les repas 
    auraient pu √™tre un peu plus vari√©s. Mais globalement, je recommande cet 
    √©tablissement pour la qualit√© des soins.
    ";
    
    $questionnaire = [
        'medecins' => 4,
        'personnel' => 5,
        'accueil' => 3,
        'prise_en_charge' => 4,
        'confort' => 3
    ];
    
    try {
        echo "üì§ Envoi de l'√©valuation...\n";
        $startTime = microtime(true);
        
        $result = $client->evaluerAvisComplet(
            'etablissement',
            $avisText,
            $questionnaire
        );
        
        $duration = microtime(true) - $startTime;
        
        echo "‚úÖ √âvaluation termin√©e!\n";
        printf("‚è±Ô∏è  Dur√©e: %.1fs\n", $duration);
        echo "\n";
        
        // Affichage des r√©sultats
        echo "üìä R√âSULTATS:\n";
        printf("Note finale: %.1f/5\n", $result['note_finale']);
        printf("Sentiment: %s\n", $result['sentiment']);
        printf("Confiance: %.0f%%\n", $result['confiance'] * 100);
        printf("Intensit√© √©motionnelle: %.0f%%\n", $result['intensite_emotionnelle'] * 100);
        
        if (!empty($result['titre_suggere'])) {
            printf("Titre sugg√©r√©: \"%s\"\n", $result['titre_suggere']);
        }
        
        if (!empty($result['mode_degrade'])) {
            echo "‚ö†Ô∏è  Mode d√©grad√© activ√© (IA limit√©e)\n";
        }
        
        echo "\n";
        
        // Analyse d√©taill√©e si disponible
        if (!empty($result['analyse_detaillee'])) {
            $analyse = $result['analyse_detaillee'];
            echo "üîç ANALYSE D√âTAILL√âE:\n";
            
            if (!empty($analyse['questionnaire'])) {
                $q = $analyse['questionnaire'];
                printf("Note questionnaire: %.1f/5\n", $q['note']);
                echo "D√©tails: " . json_encode($q['details']) . "\n";
            }
            
            if (!empty($analyse['sentiment'])) {
                $s = $analyse['sentiment'];
                printf("Sentiment IA: %s\n", $s['sentiment'] ?? 'N/A');
                printf("Confiance IA: %.0f%%\n", ($s['confidence'] ?? 0) * 100);
                
                if (!empty($s['positive_indicators'])) {
                    echo "Indicateurs positifs: " . implode(', ', array_slice($s['positive_indicators'], 0, 3)) . "\n";
                }
                
                if (!empty($s['negative_indicators'])) {
                    echo "Indicateurs n√©gatifs: " . implode(', ', array_slice($s['negative_indicators'], 0, 3)) . "\n";
                }
            }
        }
        
        return $result;
        
    } catch (Exception $e) {
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
        return null;
    }
}

/**
 * Exemple d'√©valuation d'un m√©decin
 */
function exempleMedecin() 
{
    echo "\nüë®‚Äç‚öïÔ∏è EXEMPLE: √âvaluation M√©decin\n";
    echo str_repeat("=", 50) . "\n";
    
    $client = new HospitalideeIA();
    
    $avisText = "
    Dr Martin est un m√©decin exceptionnel. D√®s notre premi√®re rencontre, j'ai 
    √©t√© impressionn√© par sa capacit√© d'√©coute et sa bienveillance. Il prend 
    vraiment le temps d'expliquer les traitements de fa√ßon claire et 
    compr√©hensible.
    
    Je me sens en totale confiance avec lui. Ses prescriptions sont toujours 
    tr√®s motiv√©es et il respecte compl√®tement mes choix et mes contraintes. 
    Je le recommande vivement !
    ";
    
    $questionnaire = [
        'explications' => 'Excellentes',
        'confiance' => 'Confiance totale',
        'motivation' => 'Tr√®s motiv√©',
        'respect' => 'Tr√®s respectueux'
    ];
    
    try {
        echo "üì§ Envoi de l'√©valuation...\n";
        
        $result = $client->evaluerAvisComplet(
            'medecin',
            $avisText,
            null,
            $questionnaire
        );
        
        echo "‚úÖ √âvaluation termin√©e!\n";
        echo "\n";
        
        echo "üìä R√âSULTATS:\n";
        printf("Note finale: %.1f/5\n", $result['note_finale']);
        printf("Sentiment: %s\n", $result['sentiment']);
        printf("Confiance: %.0f%%\n", $result['confiance'] * 100);
        
        if (!empty($result['titre_suggere'])) {
            printf("Titre sugg√©r√©: \"%s\"\n", $result['titre_suggere']);
        }
        
        return $result;
        
    } catch (Exception $e) {
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
        return null;
    }
}

/**
 * Exemple d'analyse de sentiment uniquement
 */
function exempleSentimentSeul() 
{
    echo "\nüòä EXEMPLE: Analyse Sentiment Seule\n";
    echo str_repeat("=", 50) . "\n";
    
    $client = new HospitalideeIA();
    
    $texts = [
        "Personnel tr√®s gentil et professionnel",
        "Attente beaucoup trop longue, tr√®s d√©cevant",
        "Correct dans l'ensemble, sans plus",
        "Absolument parfait, je recommande vivement !"
    ];
    
    foreach ($texts as $i => $text) {
        try {
            printf("üìù Texte %d: \"%s\"\n", $i + 1, $text);
            
            $result = $client->analyserSentimentSeul($text);
            
            if ($result['status'] === 'success') {
                $data = $result['data'];
                $sentiment = $data['sentiment'] ?? 'inconnu';
                $confidence = $data['confidence'] ?? 0;
                
                $sentimentEmojis = [
                    'positif' => 'üòä',
                    'negatif' => 'üòû',
                    'neutre' => 'üòê'
                ];
                $emoji = $sentimentEmojis[$sentiment] ?? '‚ùì';
                
                printf("   ‚Üí %s %s (confiance: %.0f%%)\n", $emoji, $sentiment, $confidence * 100);
            } else {
                printf("   ‚Üí ‚ùå Erreur: %s\n", $result['message'] ?? 'Inconnue');
            }
            
            echo "\n";
            
        } catch (Exception $e) {
            printf("   ‚Üí ‚ùå Erreur: %s\n", $e->getMessage());
            echo "\n";
        }
    }
}

/**
 * Teste la connexion √† l'API
 */
function testConnexion() 
{
    echo "üîç TEST DE CONNEXION\n";
    echo str_repeat("=", 50) . "\n";
    
    $client = new HospitalideeIA();
    
    try {
        $health = $client->verifierSante();
        
        if (($health['status'] ?? '') === 'healthy') {
            echo "‚úÖ API accessible et fonctionnelle\n";
            
            $config = $health['config'] ?? [];
            printf("   Mod√®le Mistral: %s\n", $config['modele_mistral'] ?? 'N/A');
            printf("   Version: %s\n", $config['version'] ?? 'N/A');
            
            $services = $health['services'] ?? [];
            foreach ($services as $service => $status) {
                $emoji = ($status === 'ok') ? '‚úÖ' : '‚ùå';
                printf("   %s: %s %s\n", $service, $emoji, $status);
            }
            
            return true;
        } else {
            echo "‚ö†Ô∏è  API accessible mais en mode d√©grad√©\n";
            printf("   Status: %s\n", $health['status'] ?? 'inconnu');
            return false;
        }
        
    } catch (Exception $e) {
        printf("‚ùå API non accessible: %s\n", $e->getMessage());
        echo "\n";
        echo "üîß V√©rifications:\n";
        echo "   ‚Ä¢ L'API est-elle d√©marr√©e ?\n";
        echo "   ‚Ä¢ Le port 8000 est-il ouvert ?\n";
        echo "   ‚Ä¢ URL correcte ? (d√©faut: http://localhost:8000)\n";
        return false;
    }
}

/**
 * Fonction principale - ex√©cute tous les exemples
 */
function main() 
{
    echo "üè• Hospitalid√©e IA API - Exemples PHP\n";
    echo str_repeat("=", 60) . "\n";
    echo "\n";
    echo "üí° Pour VPS, changez l'URL dans le constructeur HospitalideeIA:\n";
    echo "   http://localhost:8000        ‚Üí üíª Tests en local\n";
    echo "   http://VOTRE_IP_VPS:8000     ‚Üí üåê VPS production\n";
    echo "   https://api.votre-site.com   ‚Üí üîí VPS avec domaine SSL\n";
    echo "\n";
    
    // Test de connexion
    if (!testConnexion()) {
        echo "\n‚ùå Impossible de continuer sans connexion API\n";
        return;
    }
    
    echo "\n" . str_repeat("=", 60) . "\n";
    
    // Exemples d'utilisation
    try {
        // √âvaluation √©tablissement
        $resultEtab = exempleEtablissement();
        
        // √âvaluation m√©decin
        $resultMed = exempleMedecin();
        
        // Analyse sentiment seule
        exempleSentimentSeul();
        
        echo str_repeat("=", 60) . "\n";
        echo "üéâ Tous les exemples ont √©t√© ex√©cut√©s avec succ√®s !\n";
        echo "\n";
        echo "üí° Int√©gration dans votre code:\n";
        echo "   1. V√©rifiez que curl et json sont activ√©s\n";
        echo "   2. Copiez la classe HospitalideeIA\n";
        echo "   3. Utilisez \$client->evaluerAvisComplet()\n";
        echo "\n";
        echo "üìñ Documentation compl√®te: http://localhost:8000/docs\n";
        
    } catch (Exception $e) {
        printf("\n‚ùå Erreur g√©n√©rale: %s\n", $e->getMessage());
    }
}

// Ex√©cution si appel√© directement
if (php_sapi_name() === 'cli') {
    main();
}
?>