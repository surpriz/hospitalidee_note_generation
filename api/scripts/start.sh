#!/bin/bash
# ============================================
# üè• Hospitalid√©e IA API - Script de d√©marrage
# ============================================
# D√©marre l'API (avec ou sans Docker)

set -e

echo "üöÄ D√©marrage Hospitalid√©e IA API..."

# V√©rification du fichier .env
if [ ! -f ".env" ]; then
    echo "‚ùå Fichier .env manquant"
    echo "Copiez config.env.example vers .env et configurez votre cl√© API Mistral"
    exit 1
fi

# V√©rification de la cl√© API
if grep -q "your_mistral_api_key_here" .env; then
    echo "‚ùå Cl√© API Mistral non configur√©e dans .env"
    echo "√âditez le fichier .env et remplacez 'your_mistral_api_key_here' par votre vraie cl√©"
    exit 1
fi

# Fonction pour v√©rifier si une commande existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Option 1: Docker Compose (recommand√©)
if command_exists docker-compose && [ -f "docker-compose.yml" ]; then
    echo "üê≥ D√©marrage avec Docker Compose..."
    docker-compose up -d
    
    echo "‚è≥ Attente d√©marrage (15s)..."
    sleep 15
    
    if curl -f -s http://localhost:8000/health > /dev/null; then
        echo "‚úÖ API d√©marr√©e avec succ√®s !"
        echo ""
        echo "üìä Acc√®s:"
        echo "  ‚Ä¢ API: http://localhost:8000"
        echo "  ‚Ä¢ Documentation: http://localhost:8000/docs"
        echo ""
        echo "üîß Commandes:"
        echo "  ‚Ä¢ Logs: docker-compose logs -f"
        echo "  ‚Ä¢ Arr√™t: docker-compose down"
    else
        echo "‚ùå Erreur de d√©marrage, v√©rifiez les logs:"
        docker-compose logs
        exit 1
    fi

# Option 2: Docker simple
elif command_exists docker && [ -f "Dockerfile" ]; then
    echo "üê≥ D√©marrage avec Docker..."
    
    # Build si n√©cessaire
    if ! docker images | grep -q hospitalidee-ia-api; then
        echo "üèóÔ∏è Construction de l'image..."
        docker build -t hospitalidee-ia-api .
    fi
    
    # Arr√™t conteneur existant
    docker stop hospitalidee-ia-api 2>/dev/null || true
    docker rm hospitalidee-ia-api 2>/dev/null || true
    
    # D√©marrage
    docker run -d \
        --name hospitalidee-ia-api \
        --env-file .env \
        -p 8000:8000 \
        hospitalidee-ia-api
    
    echo "‚è≥ Attente d√©marrage (15s)..."
    sleep 15
    
    if curl -f -s http://localhost:8000/health > /dev/null; then
        echo "‚úÖ API d√©marr√©e avec succ√®s !"
        echo ""
        echo "üìä Acc√®s:"
        echo "  ‚Ä¢ API: http://localhost:8000"
        echo "  ‚Ä¢ Documentation: http://localhost:8000/docs"
        echo ""
        echo "üîß Commandes:"
        echo "  ‚Ä¢ Logs: docker logs -f hospitalidee-ia-api"
        echo "  ‚Ä¢ Arr√™t: docker stop hospitalidee-ia-api"
    else
        echo "‚ùå Erreur de d√©marrage, v√©rifiez les logs:"
        docker logs hospitalidee-ia-api
        exit 1
    fi

# Option 3: Python direct
elif command_exists python3; then
    echo "üêç D√©marrage avec Python..."
    
    # V√©rification des d√©pendances
    if [ ! -d "venv" ] && [ ! -d ".venv" ]; then
        echo "üì¶ Cr√©ation environnement virtuel..."
        python3 -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
    else
        echo "üì¶ Activation environnement virtuel..."
        if [ -d "venv" ]; then
            source venv/bin/activate
        else
            source .venv/bin/activate
        fi
    fi
    
    # Chargement variables d'environnement
    export $(cat .env | xargs)
    
    # D√©marrage
    echo "üöÄ Lancement API..."
    python main.py &
    API_PID=$!
    
    echo "‚è≥ Attente d√©marrage (10s)..."
    sleep 10
    
    if curl -f -s http://localhost:8000/health > /dev/null; then
        echo "‚úÖ API d√©marr√©e avec succ√®s !"
        echo ""
        echo "üìä Acc√®s:"
        echo "  ‚Ä¢ API: http://localhost:8000"
        echo "  ‚Ä¢ Documentation: http://localhost:8000/docs"
        echo ""
        echo "üîß Pour arr√™ter: kill $API_PID"
        echo ""
        echo "L'API fonctionne en arri√®re-plan (PID: $API_PID)"
    else
        echo "‚ùå Erreur de d√©marrage"
        kill $API_PID 2>/dev/null || true
        exit 1
    fi

else
    echo "‚ùå Aucune m√©thode de d√©marrage disponible"
    echo ""
    echo "Installez une des options suivantes:"
    echo "  ‚Ä¢ Docker + Docker Compose (recommand√©)"
    echo "  ‚Ä¢ Docker seul"
    echo "  ‚Ä¢ Python 3.8+"
    echo ""
    echo "Ou utilisez le script d'installation:"
    echo "  chmod +x scripts/install.sh"
    echo "  ./scripts/install.sh"
    exit 1
fi