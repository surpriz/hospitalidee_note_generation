#!/usr/bin/env python3
"""
üè• Hospitalid√©e IA API - Tests
=============================

Tests simples pour valider le fonctionnement de l'API.
Ces tests peuvent √™tre ex√©cut√©s pour v√©rifier que l'installation fonctionne.

Usage:
    python tests/test_api.py

Pr√©requis:
    - API d√©marr√©e sur localhost:8000
    - pip install requests
"""

import requests
import json
import time
import sys
import os

# Configuration
API_URL = "http://localhost:8000"
TIMEOUT = 60


class Colors:
    """Codes de couleur pour l'affichage"""
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'


def print_colored(text, color=Colors.WHITE):
    """Affiche un texte en couleur"""
    print(f"{color}{text}{Colors.END}")


def print_test_header(test_name):
    """Affiche l'en-t√™te d'un test"""
    print_colored(f"\nüß™ TEST: {test_name}", Colors.BOLD + Colors.CYAN)
    print_colored("-" * 50, Colors.CYAN)


def print_success(message):
    """Affiche un message de succ√®s"""
    print_colored(f"‚úÖ {message}", Colors.GREEN)


def print_error(message):
    """Affiche un message d'erreur"""
    print_colored(f"‚ùå {message}", Colors.RED)


def print_warning(message):
    """Affiche un avertissement"""
    print_colored(f"‚ö†Ô∏è  {message}", Colors.YELLOW)


def print_info(message):
    """Affiche une information"""
    print_colored(f"‚ÑπÔ∏è  {message}", Colors.BLUE)


class APITester:
    """Classe pour tester l'API Hospitalid√©e IA"""
    
    def __init__(self, api_url=API_URL):
        self.api_url = api_url.rstrip('/')
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'HospitalideeIA-Test/1.0'
        })
        self.tests_passed = 0
        self.tests_failed = 0
    
    def test_health_check(self):
        """Test 1: Health check de l'API"""
        print_test_header("Health Check")
        
        try:
            response = self.session.get(f"{self.api_url}/health", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('status') == 'healthy':
                    print_success("API accessible et saine")
                    
                    # Affichage des d√©tails
                    config = data.get('config', {})
                    print_info(f"Mod√®le Mistral: {config.get('modele_mistral', 'N/A')}")
                    print_info(f"Version: {config.get('version', 'N/A')}")
                    
                    services = data.get('services', {})
                    for service, status in services.items():
                        if status == 'ok':
                            print_success(f"Service {service}: OK")
                        else:
                            print_warning(f"Service {service}: {status}")
                    
                    self.tests_passed += 1
                    return True
                else:
                    print_warning(f"API en mode d√©grad√©: {data.get('status', 'inconnu')}")
                    self.tests_passed += 1
                    return True
            else:
                print_error(f"R√©ponse HTTP {response.status_code}")
                self.tests_failed += 1
                return False
                
        except requests.exceptions.RequestException as e:
            print_error(f"Erreur de connexion: {str(e)}")
            self.tests_failed += 1
            return False
    
    def test_basic_endpoints(self):
        """Test 2: Endpoints de base"""
        print_test_header("Endpoints de Base")
        
        endpoints = [
            ('/', 'Page d\'accueil'),
            ('/docs', 'Documentation Swagger'),
            ('/redoc', 'Documentation ReDoc')
        ]
        
        all_passed = True
        
        for endpoint, description in endpoints:
            try:
                response = self.session.get(f"{self.api_url}{endpoint}", timeout=10)
                
                if response.status_code == 200:
                    print_success(f"{description}: Accessible")
                else:
                    print_error(f"{description}: HTTP {response.status_code}")
                    all_passed = False
                    
            except Exception as e:
                print_error(f"{description}: {str(e)}")
                all_passed = False
        
        if all_passed:
            self.tests_passed += 1
        else:
            self.tests_failed += 1
        
        return all_passed
    
    def test_evaluation_etablissement(self):
        """Test 3: √âvaluation √©tablissement"""
        print_test_header("√âvaluation √âtablissement")
        
        data = {
            "type_evaluation": "etablissement",
            "avis_text": "S√©jour excellent dans cet h√¥pital. Le personnel √©tait tr√®s attentif et professionnel. Les m√©decins ont pris le temps d'expliquer les traitements. Quelques petits probl√®mes avec les repas mais globalement tr√®s satisfait.",
            "questionnaire_etablissement": {
                "medecins": 4,
                "personnel": 5,
                "accueil": 4,
                "prise_en_charge": 4,
                "confort": 3
            },
            "generer_titre": True,
            "analyse_detaillee": True
        }
        
        try:
            print_info("Envoi de l'√©valuation...")
            start_time = time.time()
            
            response = self.session.post(
                f"{self.api_url}/evaluate", 
                json=data, 
                timeout=TIMEOUT
            )
            
            duration = time.time() - start_time
            print_info(f"Dur√©e: {duration:.1f}s")
            
            if response.status_code == 200:
                result = response.json()
                
                # V√©rifications de base
                required_fields = ['note_finale', 'sentiment', 'confiance', 'timestamp']
                for field in required_fields:
                    if field not in result:
                        print_error(f"Champ manquant: {field}")
                        self.tests_failed += 1
                        return False
                
                # V√©rification des valeurs
                note = result['note_finale']
                if not (1 <= note <= 5):
                    print_error(f"Note finale invalide: {note} (doit √™tre 1-5)")
                    self.tests_failed += 1
                    return False
                
                confiance = result['confiance']
                if not (0 <= confiance <= 1):
                    print_error(f"Confiance invalide: {confiance} (doit √™tre 0-1)")
                    self.tests_failed += 1
                    return False
                
                sentiment = result['sentiment']
                if sentiment not in ['positif', 'negatif', 'neutre']:
                    print_error(f"Sentiment invalide: {sentiment}")
                    self.tests_failed += 1
                    return False
                
                # Affichage des r√©sultats
                print_success("√âvaluation r√©ussie !")
                print_info(f"Note finale: {note}/5")
                print_info(f"Sentiment: {sentiment}")
                print_info(f"Confiance: {confiance:.0%}")
                
                if result.get('titre_suggere'):
                    print_info(f"Titre: \"{result['titre_suggere']}\"")
                
                if result.get('mode_degrade'):
                    print_warning("Mode d√©grad√© activ√©")
                
                self.tests_passed += 1
                return True
                
            else:
                print_error(f"R√©ponse HTTP {response.status_code}")
                try:
                    error_detail = response.json().get('detail', 'Erreur inconnue')
                    print_error(f"D√©tail: {error_detail}")
                except:
                    pass
                self.tests_failed += 1
                return False
                
        except requests.exceptions.Timeout:
            print_error(f"Timeout apr√®s {TIMEOUT}s")
            self.tests_failed += 1
            return False
        except Exception as e:
            print_error(f"Erreur: {str(e)}")
            self.tests_failed += 1
            return False
    
    def test_evaluation_medecin(self):
        """Test 4: √âvaluation m√©decin"""
        print_test_header("√âvaluation M√©decin")
        
        data = {
            "type_evaluation": "medecin",
            "avis_text": "Dr Martin est formidable. Explications tr√®s claires et rassurantes. Je me sens en totale confiance avec lui. Il prend vraiment le temps d'√©couter et ses prescriptions sont toujours bien motiv√©es.",
            "questionnaire_medecin": {
                "explications": "Excellentes",
                "confiance": "Confiance totale",
                "motivation": "Tr√®s motiv√©",
                "respect": "Tr√®s respectueux"
            }
        }
        
        try:
            print_info("Envoi de l'√©valuation m√©decin...")
            
            response = self.session.post(
                f"{self.api_url}/evaluate", 
                json=data, 
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                result = response.json()
                
                print_success("√âvaluation m√©decin r√©ussie !")
                print_info(f"Note finale: {result['note_finale']}/5")
                print_info(f"Sentiment: {result['sentiment']}")
                
                self.tests_passed += 1
                return True
                
            else:
                print_error(f"R√©ponse HTTP {response.status_code}")
                self.tests_failed += 1
                return False
                
        except Exception as e:
            print_error(f"Erreur: {str(e)}")
            self.tests_failed += 1
            return False
    
    def test_sentiment_seul(self):
        """Test 5: Analyse de sentiment seule"""
        print_test_header("Analyse Sentiment Seule")
        
        try:
            response = self.session.post(
                f"{self.api_url}/sentiment", 
                json="Personnel tr√®s gentil et professionnel",
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                
                if result.get('status') == 'success':
                    data = result['data']
                    print_success("Analyse sentiment r√©ussie !")
                    print_info(f"Sentiment: {data.get('sentiment', 'N/A')}")
                    print_info(f"Confiance: {data.get('confidence', 0):.0%}")
                    
                    self.tests_passed += 1
                    return True
                else:
                    print_error(f"Erreur dans la r√©ponse: {result.get('message', 'Inconnue')}")
                    self.tests_failed += 1
                    return False
            else:
                print_error(f"R√©ponse HTTP {response.status_code}")
                self.tests_failed += 1
                return False
                
        except Exception as e:
            print_error(f"Erreur: {str(e)}")
            self.tests_failed += 1
            return False
    
    def test_erreurs(self):
        """Test 6: Gestion des erreurs"""
        print_test_header("Gestion des Erreurs")
        
        # Test 1: Donn√©es manquantes
        try:
            response = self.session.post(
                f"{self.api_url}/evaluate", 
                json={"type_evaluation": "etablissement", "avis_text": "Test"},
                timeout=10
            )
            
            if response.status_code == 400 or response.status_code == 422:
                print_success("Erreur 400/422 correctement retourn√©e pour donn√©es manquantes")
            else:
                print_warning(f"Code inattendu pour donn√©es manquantes: {response.status_code}")
        except Exception as e:
            print_error(f"Erreur test donn√©es manquantes: {str(e)}")
        
        # Test 2: Texte trop court
        try:
            response = self.session.post(
                f"{self.api_url}/evaluate", 
                json={
                    "type_evaluation": "etablissement",
                    "avis_text": "Court",
                    "questionnaire_etablissement": {
                        "medecins": 3, "personnel": 3, "accueil": 3,
                        "prise_en_charge": 3, "confort": 3
                    }
                },
                timeout=10
            )
            
            if response.status_code == 422:
                print_success("Erreur 422 correctement retourn√©e pour texte trop court")
            else:
                print_warning(f"Code inattendu pour texte court: {response.status_code}")
        except Exception as e:
            print_error(f"Erreur test texte court: {str(e)}")
        
        self.tests_passed += 1
        return True
    
    def run_all_tests(self):
        """Ex√©cute tous les tests"""
        print_colored("üè• Hospitalid√©e IA API - Suite de Tests", Colors.BOLD + Colors.MAGENTA)
        print_colored("=" * 60, Colors.MAGENTA)
        
        # Liste des tests
        tests = [
            self.test_health_check,
            self.test_basic_endpoints,
            self.test_evaluation_etablissement,
            self.test_evaluation_medecin,
            self.test_sentiment_seul,
            self.test_erreurs
        ]
        
        # Ex√©cution des tests
        for test in tests:
            try:
                test()
            except KeyboardInterrupt:
                print_error("\nTests interrompus par l'utilisateur")
                break
            except Exception as e:
                print_error(f"Erreur inattendue dans {test.__name__}: {str(e)}")
                self.tests_failed += 1
        
        # R√©sultats finaux
        print_colored("\n" + "=" * 60, Colors.MAGENTA)
        print_colored("üìä R√âSULTATS DES TESTS", Colors.BOLD + Colors.WHITE)
        print_colored("=" * 60, Colors.MAGENTA)
        
        total_tests = self.tests_passed + self.tests_failed
        
        if self.tests_passed > 0:
            print_success(f"Tests pass√©s: {self.tests_passed}/{total_tests}")
        
        if self.tests_failed > 0:
            print_error(f"Tests √©chou√©s: {self.tests_failed}/{total_tests}")
        
        if self.tests_failed == 0:
            print_colored("\nüéâ TOUS LES TESTS PASSENT !", Colors.BOLD + Colors.GREEN)
            print_success("Votre API Hospitalid√©e IA fonctionne parfaitement !")
            print_info("Pr√™t pour la production ! üöÄ")
            return True
        else:
            print_colored(f"\n‚ö†Ô∏è  {self.tests_failed} test(s) ont √©chou√©", Colors.BOLD + Colors.YELLOW)
            print_warning("V√©rifications sugg√©r√©es:")
            print_info("‚Ä¢ L'API est-elle d√©marr√©e ? curl http://localhost:8000/health")
            print_info("‚Ä¢ La cl√© Mistral est-elle configur√©e dans .env ?")
            print_info("‚Ä¢ Consultez les logs: docker-compose logs")
            return False


def main():
    """Fonction principale"""
    # V√©rification des arguments
    if len(sys.argv) > 1:
        api_url = sys.argv[1]
        print_info(f"URL API personnalis√©e: {api_url}")
    else:
        api_url = API_URL
        print_info(f"URL API par d√©faut: {api_url}")
    
    # Ex√©cution des tests
    tester = APITester(api_url)
    success = tester.run_all_tests()
    
    # Code de sortie
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_colored("\n\n‚èπÔ∏è  Tests arr√™t√©s par l'utilisateur", Colors.YELLOW)
        sys.exit(130)